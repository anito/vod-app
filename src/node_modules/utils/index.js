import { get } from 'svelte/store';
import * as api from 'api';
import { urls } from '../../stores/urlStore';
import { fromUnixTime, compareAsc } from 'date-fns';
import { formatISO9075 } from 'date-fns';

export function post(endpoint, data = {}) {
  return fetch(endpoint, {
    method: 'POST',
    credentials: 'include',
    body: JSON.stringify(data),
    headers: {
      'Content-Type': 'application/json',
    },
  }).then((r) => r.json());
}
export function del(endpoint, id) {
  return fetch(endpoint, {
    method: 'DELETE',
    credentials: 'include',
    body: id,
    headers: {
      'Content-Type': 'application/json',
    },
  }).then((r) => r.json());
}
export function put(endpoint, data = {}) {
  return fetch(endpoint, {
    method: 'PUT',
    credentials: 'include',
    body: JSON.stringify(data),
    headers: {
      'Content-Type': 'application/json',
    },
  }).then((r) => r.json());
}
async function uri(id, user, type, { width, height, square }) {
  let query = `?width=${width}&height=${height}&square=${square}`;
  let url = `u/${type}/${id}/${query}`;

  const res = await api.get(url, user && user.token);

  if (res && res.success) {
    return res.data;
  } else {
    throw `The Uri method was unable to fetch a mediafile type: ${type.toUpperCase()}, id: ${id}`;
  }
}
export async function getMedia(type, id, user, { ...options }) {
  const TYPE = type === 'IMAGE' ? 'i' : type === 'VIDEO' ? 'v' : type === 'AVATAR' ? 'a' : 'i';

  if (user && user.token) {
    let defaults = {
      width: 300,
      height: 300,
      square: 0,
    };
    const params = { ...defaults, ...options };
    let cached, url, _urls, stringified;
    stringified = JSON.stringify(params).replace(/[\"\'\s]/g, '');

    url = cached = ((_urls = get(urls)) && _urls.has(id) && _urls.get(id)[stringified]) || false;

    if (!cached) {
      await uri(id, user, TYPE, params)
        .then((res) => (url = res['url']) && urls.add(res))
        .catch((e) => {
          console.log(e);
        });
    }
    if (url) return `${url}/?token=${user.token}`;
  }
}
export function equals(obj_1, obj_2) {
  let json_1 = typeof obj_1 === 'object' && JSON.stringify(obj_1);
  let json_2 = typeof obj_2 === 'object' && JSON.stringify(obj_2);
  if (!!json_1 && !!json_2) {
    return json_1 === json_2;
  }
  return false;
}
export function getExt(fn) {
  let match = (fn && fn.match(/[A-Za-z0-9]+$/)) || [];
  return match.length && match[0].toLowerCase();
}
export function toLocalDate(date, options = {}) {
  let defaults = {
    year: 'numeric',
    month: 'short', // 2-digit
    day: '2-digit',
    hour: 'numeric',
    minute: 'numeric',
  };
  options = { ...defaults, ...options };
  return new Date(date).toLocaleDateString('de-DE', options);
}
export function isExpired(endDate) {
  if (!(endDate instanceof Date)) endDate = fromUnixTime(endDate);
  return compareAsc(new Date(), endDate) !== -1 ? true : false;
}
export function hasStarted(date) {
  return compareAsc(new Date(), date) !== -1 ? true : false;
}
export function createRedirectSlug(page) {
  let queries = Object.entries(page.query)
    .map(([key, val]) => `${key}=${val}`)
    .join('&');
  let bit = '';
  return (bit = `?redirect=${page.path}`) && queries ? `${bit}&${queries}` : bit;
}
export function redirectPath(page, session) {
  let path, tab;

  path = session.role === 'Administrator' ? 'users' : 'videos';
  if (session.role !== 'Administrator') return path;
  return page.query.redirect && (path = page.query.redirect)
    ? (tab = page.query.tab)
      ? path + `?tab=${tab}`
      : path
    : path;
}
export function toISODate(date, tillMidnight) {
  return formatISO9075(
    new Date(
      date.getFullYear(),
      date.getMonth(),
      date.getDate(),
      tillMidnight ? 23 : date.getHours(),
      tillMidnight ? 59 : date.getMinutes(),
      tillMidnight ? 59 : date.getSeconds()
    )
  );
}
export function windowSize() {
  var width = 0,
    height = 0;
  if (document.documentElement && (document.documentElement.clientWidth || document.documentElement.clientHeight)) {
    width = document.documentElement.clientWidth;
    height = document.documentElement.clientHeight;
  } else {
    if ('number' == typeof window.innerWidth) {
      width = window.innerWidth;
      height = window.innerHeight;
    } else if (document.body && (document.body.clientWidth || document.body.clientHeight)) {
      width = document.body.clientWidth;
      height = document.body.clientHeight;
    }
  }
  return {
    height: height,
    width: width,
  };
}
// https://gist.github.com/faisalman/4213592
export let convert = (() => {
  const convertBase = (num) => {
    return {
      from: (baseFrom) => {
        return {
          to: (baseTo) => {
            return parseInt(num, baseFrom).toString(baseTo);
          },
        };
      },
    };
  };

  return {
    dec2Hex: (num, rel) => {
      rel && (num *= 255);
      return convertBase(num).from(10).to(16);
    },
  };
})();
export const proxyEvent = function (eventType, detail = {}) {
  let type = typeof eventType === 'string' ? eventType : detail.eventType;
  window.dispatchEvent(new CustomEvent(type, { detail }));
};
// export heartBeat = function () {

// }
export const key = {};